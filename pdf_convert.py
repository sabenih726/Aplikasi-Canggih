# -*- coding: utf-8 -*-
"""PDF Convert.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rsoLwG_g39_0ZTi_TUu6d02AEUa3JJAH
"""

# Install pdfplumber jika belum terinstal
!pip install pdfplumber

!pip install pymupdf tabulate

# File PDF EVLN
import re
import pdfplumber
import pandas as pd
from google.colab import files
from IPython.display import display
import sys

# Fungsi untuk mengekstrak teks dari semua halaman dalam satu file PDF
def extract_text_from_pdf(pdf_path):
    text = ""
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            page_text = page.extract_text()
            if page_text:  # Cek jika halaman memiliki teks
                text += page_text + "\n"
    return text

# Fungsi untuk membersihkan nama dan tempat lahir
def clean_text(text):
    text = re.sub(r"Reference No|Payment Receipt No", "", text)  # Hapus kata tidak relevan
    text = re.sub(r"[^A-Za-z\s]", "", text).strip()  # Hapus karakter selain huruf dan spasi
    return " ".join(text.split()[:2])  # Ambil maksimal dua kata pertama

# Fungsi untuk memformat tanggal ke DD/MM/YYYY
def format_date(date_str):
    """Format tanggal dari DD-MM-YYYY atau DD/MM/YYYY menjadi DD/MM/YYYY"""
    match = re.search(r"(\d{2})[-/](\d{2})[-/](\d{4})", date_str)
    if match:
        day, month, year = match.groups()
        return f"{day}/{month}/{year}"
    return date_str

# Fungsi untuk memetakan teks ke dalam format tabel
def map_text_to_table(text):
    data = {
        "Name": "",
        "Place of Birth": "",
        "Date of Birth": "",
        "Passport No": "",
        "Passport Expiry": ""
    }

    for line in text.split("\n"):
        # Deteksi Nama
        if re.search(r"(?i)\bName\b|\bNama\b", line):
            parts = line.split(":")
            if len(parts) > 1:
                data["Name"] = clean_text(parts[1])

        # Deteksi Tempat Lahir
        elif re.search(r"(?i)\bPlace of Birth\b|\bTempat Lahir\b", line):
            parts = line.split(":")
            if len(parts) > 1:
                data["Place of Birth"] = clean_text(parts[1])

        # Deteksi Tanggal Lahir
        elif re.search(r"(?i)\bDate of Birth\b|\bTanggal Lahir\b", line):
            match = re.search(r"(\d{2}/\d{2}/\d{4}|\d{2}-\d{2}-\d{4})", line)
            if match:
                data["Date of Birth"] = format_date(match.group(1))

        # Deteksi Nomor Paspor
        elif re.search(r"(?i)\bPassport No\b", line):
            match = re.search(r"\b([A-Z0-9]+)\b", line)
            if match:
                data["Passport No"] = match.group(1)

        # Deteksi Masa Berlaku Paspor
        elif re.search(r"(?i)\bPassport Expiry\b", line):
            match = re.search(r"(\d{2}/\d{2}/\d{4}|\d{2}-\d{2}-\d{4})", line)
            if match:
                data["Passport Expiry"] = format_date(match.group(1))

    return pd.DataFrame([data])

# Fungsi untuk mengekstrak data dari satu file PDF
def extract_specific_data_from_pdf(pdf_path):
    text = extract_text_from_pdf(pdf_path)
    return map_text_to_table(text)

# Fungsi untuk meng-upload file PDF dan ekstrak data tanpa log upload
def upload_and_extract_data():
    # Sembunyikan log upload
    original_stdout = sys.stdout
    sys.stdout = open('/dev/null', 'w')  # Sembunyikan output log
    uploaded = files.upload()
    sys.stdout = original_stdout  # Kembalikan output ke normal

    all_data = []

    # Ekstrak data dari setiap file yang diunggah
    for file_name in uploaded.keys():
        extracted_data = extract_specific_data_from_pdf(file_name)
        extracted_data['File Name'] = file_name  # Tambahkan nama file
        all_data.append(extracted_data)

    # Gabungkan hasil ekstraksi dalam satu DataFrame
    return pd.concat(all_data, ignore_index=True) if all_data else pd.DataFrame()

# Ekstraksi data setelah upload
all_pdf_data = upload_and_extract_data()

# Simpan hasil ke file Excel
download_filename = "EVLN_data.xlsx"
all_pdf_data.to_excel(download_filename, index=False)

# Menampilkan hasil dalam format tabel
display(all_pdf_data)



# Unduh otomatis file Excel
files.download(download_filename)

# File PDF SKTT
import re
import pdfplumber
import pandas as pd
import sys  # Import modul sys
from google.colab import files
from IPython.display import display  # Untuk menampilkan tabel dengan format yang bagus di Colab

# Fungsi untuk membersihkan teks agar lebih rapi dan menghapus label tambahan
def clean_text(text):
    if text:
        text = re.sub(r'\n+', ' ', text.strip())  # Hapus newline berlebihan
        text = re.sub(r'\b(Jenis Kelamin|Kewarganegaraan|Pekerjaan|Alamat)\b', '', text)  # Hapus label tambahan
        text = re.sub(r'\s+', ' ', text)  # Hapus spasi berlebih
        return text.strip()
    return None

# Fungsi untuk memformat tanggal ke DD/MM/YYYY
def format_date(date_str):
    """Format tanggal dari DD-MM-YYYY atau DD/MM/YYYY menjadi DD/MM/YYYY"""
    match = re.search(r"(\d{2})[-/](\d{2})[-/](\d{4})", date_str)
    if match:
        day, month, year = match.groups()
        return f"{day}/{month}/{year}"
    return date_str

# Fungsi untuk memisahkan tempat dan tanggal lahir
def split_birth_place_date(text):
    if text:
        parts = text.split(", ")
        if len(parts) == 2:
            return parts[0], format_date(parts[1])  # Pisahkan tempat dan format tanggal
        return text, None
    return None, None

# Fungsi untuk mengekstrak data dari file PDF
def extract_data_from_pdf(pdf_path):
    with pdfplumber.open(pdf_path) as pdf:
        all_text = "\n".join([page.extract_text() for page in pdf.pages if page.extract_text()])

        # Gunakan regex untuk menangkap hanya nilai, bukan labelnya
        nik = re.search(r'NIK/Number of Population Identity\s*:\s*(\d+)', all_text)
        name = re.search(r'Nama/Name\s*:\s*([\w\s]+)', all_text)
        gender = re.search(r'Jenis Kelamin/Sex\s*:\s*(MALE|FEMALE)', all_text)
        birth_place_date = re.search(r'Tempat/Tgl Lahir\s*:\s*([\w\s,0-9-]+)', all_text)
        nationality = re.search(r'Kewarganegaraan/Nationality\s*:\s*([\w\s]+)', all_text)
        occupation = re.search(r'Pekerjaan/Occupation\s*:\s*([\w\s]+)', all_text)
        address = re.search(r'Alamat/Address\s*:\s*([\w\s,./-]+)', all_text)
        kitab_kitas = re.search(r'Nomor KITAP/KITAS Number\s*:\s*([\w-]+)', all_text)
        expiry_date = re.search(r'Berlaku Hingga s.d/Expired date\s*:\s*([\d-]+)', all_text)

        # Pisahkan tempat dan tanggal lahir
        birth_place, birth_date = split_birth_place_date(birth_place_date.group(1)) if birth_place_date else (None, None)

        # Simpan hasil ekstraksi ke dalam dictionary
        extracted_data = {
            "NIK": clean_text(nik.group(1)) if nik else None,
            "Nama": clean_text(name.group(1)) if name else None,
            "Jenis Kelamin": clean_text(gender.group(1)) if gender else None,
            "Tempat Lahir": clean_text(birth_place),
            "Tanggal Lahir": birth_date,
            "Kewarganegaraan": clean_text(nationality.group(1)) if nationality else None,
            "Pekerjaan": clean_text(occupation.group(1)) if occupation else None,
            "Alamat": clean_text(address.group(1)) if address else None,
            "Nomor KITAP/KITAS": clean_text(kitab_kitas.group(1)) if kitab_kitas else None,
            "Berlaku Hingga": clean_text(expiry_date.group(1)) if expiry_date else None,
        }

        return extracted_data

# Fungsi untuk meng-upload file PDF dan ekstrak data
def upload_and_extract_data():
    # Sembunyikan log upload
    original_stdout = sys.stdout
    sys.stdout = open('/dev/null', 'w')  # Sembunyikan output log
    uploaded = files.upload()
    sys.stdout = original_stdout  # Kembalikan output ke normal

    all_data = []

    # Ekstrak data dari setiap file yang di-upload
    for file_name in uploaded.keys():
        extracted_data = extract_data_from_pdf(file_name)
        extracted_data["File Name"] = file_name  # Tambahkan nama file untuk identifikasi
        all_data.append(extracted_data)

    # Konversi ke DataFrame Pandas
    df = pd.DataFrame(all_data)

    # Simpan hasil ekstraksi ke CSV dan Excel
    csv_filename = "SKTT.csv"
    excel_filename = "SKTT.xlsx"

    df.to_csv(csv_filename, index=False)  # Simpan dalam CSV
    df.to_excel(excel_filename, index=False)  # Simpan dalam Excel

    print(f"\nâœ… Data berhasil diekstrak dan disimpan sebagai {csv_filename} dan {excel_filename}")

    return df, csv_filename, excel_filename

# Jalankan ekstraksi data
df_result, csv_file, excel_file = upload_and_extract_data()

# Tampilkan hasil ekstraksi
display(df_result)

# Berikan opsi unduhan untuk CSV dan Excel
files.download(excel_file)

# File ITAS
import pdfplumber
import re
import pandas as pd
from google.colab import files

# 1. Unggah file PDF
uploaded = files.upload()
pdf_path = list(uploaded.keys())[0]  # Ambil nama file yang diunggah

# 2. Fungsi untuk mengekstrak teks dari PDF
def extract_text_from_pdf(pdf_path):
    with pdfplumber.open(pdf_path) as pdf:
        text = "\n".join(page.extract_text() for page in pdf.pages if page.extract_text())
    return text

# 3. Fungsi untuk mengonversi format tanggal ke Day/Month/Year
def format_date(date_str):
    """Ubah format tanggal dari YYYY-MM-DD ke DD/MM/YYYY"""
    match = re.match(r'(\d{2})-(\d{2})-(\d{4})', date_str)
    if match:
        day, month, year = match.groups()
        return f"{day}/{month}/{year}"
    return date_str

# 4. Fungsi untuk mengekstrak informasi dari teks
def extract_info(text):
    data = {}

    # Ekstraksi data dengan regex
    data["Name"] = re.search(r"([A-Z\s]+)\nPERMIT NUMBER", text).group(1).strip() if re.search(r"([A-Z\s]+)\nPERMIT NUMBER", text) else None
    data["Permit Number"] = re.search(r"PERMIT NUMBER\s*:\s*([A-Z0-9-]+)", text).group(1) if re.search(r"PERMIT NUMBER\s*:\s*([A-Z0-9-]+)", text) else None
    data["Stay Permit Expiry"] = re.search(r"STAY PERMIT EXPIRY\s*:\s*([\d/]+)", text).group(1) if re.search(r"STAY PERMIT EXPIRY\s*:\s*([\d/]+)", text) else None

    # Ekstraksi Place & Date of Birth dengan format baru
    place_date_birth_match = re.search(r"Place / Date of Birth\s*.*:\s*([A-Za-z\s]+)\s*/\s*([\d-]+)", text)

    if place_date_birth_match:
        place = place_date_birth_match.group(1).strip()
        date = place_date_birth_match.group(2).strip()
        formatted_date = format_date(date)
        data["Place & Date of Birth"] = f"{place}, {formatted_date}"
    else:
        data["Place & Date of Birth"] = None

    # Ekstraksi Passport Number dan Expiry
    data["Passport Number"] = re.search(r"Passport Number\s*: ([A-Z0-9]+)", text).group(1) if re.search(r"Passport Number\s*: ([A-Z0-9]+)", text) else None
    data["Passport Expiry"] = re.search(r"Passport Expiry\s*: ([\d-]+)", text).group(1) if re.search(r"Passport Expiry\s*: ([\d-]+)", text) else None

    # Ekstraksi Nationality, Gender, Address, Occupation, dan Guarantor
    data["Nationality"] = re.search(r"Nationality\s*: ([A-Z]+)", text).group(1) if re.search(r"Nationality\s*: ([A-Z]+)", text) else None
    data["Gender"] = re.search(r"Gender\s*: ([A-Z]+)", text).group(1) if re.search(r"Gender\s*: ([A-Z]+)", text) else None

    address_match = re.search(r"Address\s*:\s*(.+)", text)
    data["Address"] = address_match.group(1).strip() if address_match else None

    occupation_match = re.search(r"Occupation\s*:\s*(.+)", text)
    data["Occupation"] = occupation_match.group(1).strip() if occupation_match else None

    guarantor_match = re.search(r"Guarantor\s*:\s*(.+)", text)
    data["Guarantor"] = guarantor_match.group(1).strip() if guarantor_match else None

    return data

# 5. Ekstraksi teks dari file PDF yang diunggah
pdf_text = extract_text_from_pdf(pdf_path)

# 6. Ekstraksi informasi dari teks
extracted_data = extract_info(pdf_text)

# 7. Konversi hasil ke dalam bentuk tabel horizontal menggunakan pandas
df = pd.DataFrame([extracted_data])

# 8. Menampilkan hasil dalam bentuk tabel horizontal
print("\n=== Hasil Ekstraksi dalam Bentuk Tabel ===")
display(df)

# Jika ingin menyimpan hasil ke file Excel atau CSV File ITAS
df.to_excel("ITAS_Data.xlsx", index=False)

# File Notifikasi
#import pdfplumber
import re
import pandas as pd
import logging
from google.colab import files

# Menonaktifkan peringatan dari pdfminer
logging.getLogger("pdfminer.pdfpage").setLevel(logging.ERROR)

# 1. Unggah beberapa file PDF
uploaded = files.upload()
pdf_paths = list(uploaded.keys())  # Ambil semua nama file yang diunggah

# 2. Fungsi untuk mengekstrak teks dari PDF
def extract_text_from_pdf(pdf_path):
    with pdfplumber.open(pdf_path) as pdf:
        text = "\n".join(page.extract_text() for page in pdf.pages if page.extract_text())
    return text

# 3. Fungsi untuk mengonversi format tanggal ke Day/Month/Year
def format_date(date_str):
    month_map = {
        "Januari": "01", "Februari": "02", "Maret": "03", "April": "04",
        "Mei": "05", "Juni": "06", "Juli": "07", "Agustus": "08",
        "September": "09", "Oktober": "10", "November": "11", "Desember": "12"
    }
    match = re.search(r"(\d{1,2})\s+([A-Za-z]+)\s+(\d{4})", date_str)
    if match:
        day, month, year = match.groups()
        month_num = month_map.get(month, month)  # Konversi nama bulan ke angka
        return f"{day}/{month_num}/{year}"
    return date_str

# 4. Fungsi untuk mengekstrak informasi dari teks
def extract_info(text):
    data = {}
    data["Nama TKA"] = re.search(r"Nama TKA\s*:\s*(.+)", text).group(1).strip() if re.search(r"Nama TKA\s*:\s*(.+)", text) else None
    place_date_match = re.search(r"Tempat/Tanggal Lahir\s*:\s*([A-Za-z\s]+),\s*([\d\s\w]+)", text)
    if place_date_match:
        place = place_date_match.group(1).strip()
        date_str = place_date_match.group(2).strip()
        formatted_date = format_date(date_str)
        data["Tempat/Tanggal Lahir"] = f"{place}, {formatted_date}"
    else:
        data["Tempat/Tanggal Lahir"] = None
    data["Kewarganegaraan"] = re.search(r"Kewarganegaraan\s*:\s*(.+)", text).group(1).strip() if re.search(r"Kewarganegaraan\s*:\s*(.+)", text) else None
    data["Alamat Tempat Tinggal"] = re.search(r"Alamat Tempat Tinggal\s*:\s*(.+)", text).group(1).strip() if re.search(r"Alamat Tempat Tinggal\s*:\s*(.+)", text) else None
    data["Nomor Paspor"] = re.search(r"Nomor Paspor\s*:\s*(.+)", text).group(1).strip() if re.search(r"Nomor Paspor\s*:\s*(.+)", text) else None
    data["Jabatan"] = re.search(r"Jabatan\s*:\s*(.+)", text).group(1).strip() if re.search(r"Jabatan\s*:\s*(.+)", text) else None
    data["Lokasi Kerja"] = re.search(r"Lokasi kerja\s*:\s*(.+)", text).group(1).strip() if re.search(r"Lokasi kerja\s*:\s*(.+)", text) else None
    berlaku_match = re.search(r"Berlaku\s*:\s*(\d{2}-\d{2}-\d{4})\s*s\.d\s*(\d{2}-\d{2}-\d{4})", text)
    if berlaku_match:
        start_date = berlaku_match.group(1).replace("-", "/")
        end_date = berlaku_match.group(2).replace("-", "/")
        data["Berlaku"] = f"{start_date} - {end_date}"
    else:
        data["Berlaku"] = None
    return data

# 5. Menyimpan hasil ekstraksi untuk setiap file PDF
all_data = []
for pdf_path in pdf_paths:
    # Ekstraksi teks dari setiap file PDF
    pdf_text = extract_text_from_pdf(pdf_path)

    # Ekstraksi informasi dari teks
    extracted_data = extract_info(pdf_text)

    # Tambahkan hasil ekstraksi ke dalam list
    all_data.append(extracted_data)

# 6. Mengonversi semua hasil ekstraksi menjadi DataFrame
df = pd.DataFrame(all_data)

# 7. Menyimpan hasil ke file Excel
excel_file = "/content/Notifikasi.xlsx"
df.to_excel(excel_file, index=False)

# 8. Menampilkan hasil dalam bentuk tabel horizontal
print("\n=== Hasil Ekstraksi dalam Bentuk Tabel ===")
display(df)



# 9. Menyediakan file Excel untuk diunduh
files.download(excel_file)

# File Notifikasi
import pdfplumber
import re
import pandas as pd
from google.colab import files

# 1. Unggah beberapa file PDF
uploaded = files.upload()
pdf_paths = list(uploaded.keys())  # Ambil semua nama file yang diunggah

# 2. Fungsi untuk mengekstrak teks dari PDF
def extract_text_from_pdf(pdf_path):
    with pdfplumber.open(pdf_path) as pdf:
        text = "\n".join(page.extract_text() for page in pdf.pages if page.extract_text())
    return text

# 3. Fungsi untuk mengonversi format tanggal ke Day/Month/Year
def format_date(date_str):
    """Ubah format tanggal dari YYYY-MM-DD ke DD/MM/YYYY"""
    match = re.match(r'(\d{2})-(\d{2})-(\d{4})', date_str)
    if match:
        day, month, year = match.groups()
        return f"{day}/{month}/{year}"
    return date_str

# 4. Fungsi untuk mengekstrak informasi dari teks
def extract_info(text):
    data = {}

    # Ekstraksi data dengan regex
    data["Name"] = re.search(r"([A-Z\s]+)\nPERMIT NUMBER", text).group(1).strip() if re.search(r"([A-Z\s]+)\nPERMIT NUMBER", text) else None
    data["Permit Number"] = re.search(r"PERMIT NUMBER\s*:\s*([A-Z0-9-]+)", text).group(1) if re.search(r"PERMIT NUMBER\s*:\s*([A-Z0-9-]+)", text) else None
    data["Stay Permit Expiry"] = re.search(r"STAY PERMIT EXPIRY\s*:\s*([\d/]+)", text).group(1) if re.search(r"STAY PERMIT EXPIRY\s*:\s*([\d/]+)", text) else None

    # Ekstraksi Place & Date of Birth
    birth_match = re.search(r"Place / Date of Birth\s*.*:\s*([a-zA-Z\s]+)\s*/\s*([\d-]+)", text)
    if birth_match:
        place = birth_match.group(1).strip()
        date = birth_match.group(2).strip()
        formatted_date = format_date(date)
        data["Place & Date of Birth"] = f"{place}, {formatted_date}"
    else:
        data["Place & Date of Birth"] = None

    # Ekstraksi Passport Number dan Expiry
    data["Passport Number"] = re.search(r"Passport Number\s*:\s*([A-Z0-9]+)", text).group(1) if re.search(r"Passport Number\s*:\s*([A-Z0-9]+)", text) else None
    data["Passport Expiry"] = re.search(r"Passport Expiry\s*:\s*([\d-]+)", text).group(1) if re.search(r"Passport Expiry\s*:\s*([\d-]+)", text) else None

    # Ekstraksi Nationality, Gender, Address, Occupation, dan Guarantor
    data["Nationality"] = re.search(r"Nationality\s*:\s*([A-Z]+)", text).group(1) if re.search(r"Nationality\s*:\s*([A-Z]+)", text) else None
    data["Gender"] = re.search(r"Gender\s*:\s*([A-Z]+)", text).group(1) if re.search(r"Gender\s*:\s*([A-Z]+)", text) else None

    address_match = re.search(r"Address\s*:\s*(.+)", text)
    data["Address"] = address_match.group(1).strip() if address_match else None

    occupation_match = re.search(r"Occupation\s*:\s*(.+)", text)
    data["Occupation"] = occupation_match.group(1).strip() if occupation_match else None

    guarantor_match = re.search(r"Guarantor\s*:\s*(.+)", text)
    data["Guarantor"] = guarantor_match.group(1).strip() if guarantor_match else None

    return data

# 5. Ekstraksi teks dan informasi dari setiap file PDF
all_data = []
for pdf_path in pdf_paths:
    # Ekstraksi teks dari file PDF
    pdf_text = extract_text_from_pdf(pdf_path)

    # Ekstraksi informasi dari teks
    extracted_data = extract_info(pdf_text)

    # Tambahkan hasil ekstraksi ke dalam list
    all_data.append(extracted_data)

# 6. Konversi semua hasil ekstraksi menjadi DataFrame
df = pd.DataFrame(all_data)

# 7. Menampilkan hasil dalam bentuk tabel horizontal
print("\n=== Hasil Ekstraksi dalam Bentuk Tabel ===")
display(df)

# 9. Menyediakan file Excel untuk diunduh
files.download(excel_file)